{"ast":null,"code":"// src/services/authService.ts\nconst API_URL = 'http://localhost:3002'; // A URL do seu backend NestJS\n\n// Interface para os dados de login, para consistência\n\n// Interface para os dados de cadastro\n\n// Função de Login\nexport const login = async data => {\n  const response = await fetch(`${API_URL}/auth/login`, {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify(data)\n  });\n  if (!response.ok) {\n    const errorData = await response.json();\n    // Lança um erro com a mensagem vinda do backend para ser capturado no componente\n    throw new Error(errorData.message || 'Falha no login');\n  }\n  return response.json(); // Retorna o { access_token }\n};\n\n// Nova Função de Cadastro\nexport const register = async data => {\n  const response = await fetch(`${API_URL}/auth/register`, {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify(data)\n  });\n  if (!response.ok) {\n    const errorData = await response.json();\n    // Lança um erro com a mensagem do backend (ex: \"Email já cadastrado\")\n    throw new Error(errorData.message || 'Falha no cadastro');\n  }\n  return response.json(); // Retorna os dados do usuário criado (sem a senha)\n};","map":{"version":3,"names":["API_URL","login","data","response","fetch","method","headers","body","JSON","stringify","ok","errorData","json","Error","message","register"],"sources":["C:/Users/anton/OneDrive/Desktop/Trackz/trackz-web/src/services/authService.ts"],"sourcesContent":["// src/services/authService.ts\r\nconst API_URL = 'http://localhost:3002'; // A URL do seu backend NestJS\r\n\r\n// Interface para os dados de login, para consistência\r\ninterface LoginData {\r\n  username: string;\r\n  senha: string;\r\n}\r\n\r\n// Interface para os dados de cadastro\r\ninterface RegisterData {\r\n  nome: string;\r\n  email: string;\r\n  username: string;\r\n  senha: string;\r\n}\r\n\r\n// Função de Login\r\nexport const login = async (data: LoginData) => {\r\n  const response = await fetch(`${API_URL}/auth/login`, {\r\n    method: 'POST',\r\n    headers: {\r\n      'Content-Type': 'application/json',\r\n    },\r\n    body: JSON.stringify(data),\r\n  });\r\n\r\n  if (!response.ok) {\r\n    const errorData = await response.json();\r\n    // Lança um erro com a mensagem vinda do backend para ser capturado no componente\r\n    throw new Error(errorData.message || 'Falha no login');\r\n  }\r\n\r\n  return response.json(); // Retorna o { access_token }\r\n};\r\n\r\n// Nova Função de Cadastro\r\nexport const register = async (data: RegisterData) => {\r\n  const response = await fetch(`${API_URL}/auth/register`, {\r\n    method: 'POST',\r\n    headers: {\r\n      'Content-Type': 'application/json',\r\n    },\r\n    body: JSON.stringify(data),\r\n  });\r\n\r\n  if (!response.ok) {\r\n    const errorData = await response.json();\r\n    // Lança um erro com a mensagem do backend (ex: \"Email já cadastrado\")\r\n    throw new Error(errorData.message || 'Falha no cadastro');\r\n  }\r\n\r\n  return response.json(); // Retorna os dados do usuário criado (sem a senha)\r\n};"],"mappings":"AAAA;AACA,MAAMA,OAAO,GAAG,uBAAuB,CAAC,CAAC;;AAEzC;;AAMA;;AAQA;AACA,OAAO,MAAMC,KAAK,GAAG,MAAOC,IAAe,IAAK;EAC9C,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,GAAGJ,OAAO,aAAa,EAAE;IACpDK,MAAM,EAAE,MAAM;IACdC,OAAO,EAAE;MACP,cAAc,EAAE;IAClB,CAAC;IACDC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAACP,IAAI;EAC3B,CAAC,CAAC;EAEF,IAAI,CAACC,QAAQ,CAACO,EAAE,EAAE;IAChB,MAAMC,SAAS,GAAG,MAAMR,QAAQ,CAACS,IAAI,CAAC,CAAC;IACvC;IACA,MAAM,IAAIC,KAAK,CAACF,SAAS,CAACG,OAAO,IAAI,gBAAgB,CAAC;EACxD;EAEA,OAAOX,QAAQ,CAACS,IAAI,CAAC,CAAC,CAAC,CAAC;AAC1B,CAAC;;AAED;AACA,OAAO,MAAMG,QAAQ,GAAG,MAAOb,IAAkB,IAAK;EACpD,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,GAAGJ,OAAO,gBAAgB,EAAE;IACvDK,MAAM,EAAE,MAAM;IACdC,OAAO,EAAE;MACP,cAAc,EAAE;IAClB,CAAC;IACDC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAACP,IAAI;EAC3B,CAAC,CAAC;EAEF,IAAI,CAACC,QAAQ,CAACO,EAAE,EAAE;IAChB,MAAMC,SAAS,GAAG,MAAMR,QAAQ,CAACS,IAAI,CAAC,CAAC;IACvC;IACA,MAAM,IAAIC,KAAK,CAACF,SAAS,CAACG,OAAO,IAAI,mBAAmB,CAAC;EAC3D;EAEA,OAAOX,QAAQ,CAACS,IAAI,CAAC,CAAC,CAAC,CAAC;AAC1B,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}